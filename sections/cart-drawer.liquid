<div class="cart-drawer">
  <div class="cart-drawer-box">
    {% comment %} Header section {% endcomment %}
    <div class="cart-drawer-header">
      <h2>Shopping Bag</h2>

      <div class="cart-drawer-header-right">
        <span class="cart-drawer-header-right-items">{{ cart.item_count }} items</span>
        <button class="cart-drawer-header-right-close" type="button">
          {% render 'close-icon' %}
        </button>
      </div>
    </div>

    {% form 'cart', cart, class: 'cart-drawer-form' %}
      {% if cart.item_count == 0 %}
        <p class="cart-drawer-empty">Your cart is empty</p>
      {% else %}
        <div class="cart-drawer-items">
          {% for item in cart.items %}
            <div class="cart-drawer-item" data-line-item-key="{{ item.key }}">
              <div class="cart-drawer-item-image">
                {{ item.image | image_url: width: '200' | image_tag }}
              </div>
              <div class="cart-drawer-item-main">
                <div class="cart-drawer-item-main-flex">
                  <div class="cart-drawer-item-main-flex-left">
                    <span>{{ item.product.collections.first.title }}</span>
                    <h3>
                      <a href="{{ item.url }}">{{ item.product.title }}</a>
                    </h3>
                    <button class="remove-from-cart" type="button" data-line-item-key="{{ item.key }}">
                      {% render 'close-icon' %}
                    </button>
                  </div>
                </div>
                <div class="cart-dow">
                  <div class="cart-drawer-item-main-flex-right">
                    <span>{{ item.final_line_price | money }}</span>
                  </div>
                  <div class="cart-drawer-quantity-selector">
                    <button class="cart-drawer-quantity-selector-minus" type="button">
                      {% render 'minus-icon' %}
                    </button>
                    <input
                      type="text"
                      readonly
                      value="{{ item.quantity }}"
                    >

                    <button class="cart-drawer-quantity-selector-plus" type="button">
                      {% render 'plus-icon' %}
                    </button>
                  </div>
                </div>
              </div>
            </div>
          {% endfor %}
        </div>

        <footer class="cart-drawer-footer">
          {% if cart.total_discounts > 0 %}
            <div class="cart-drawer-footer-row">
              <h3>Discounts</h3>
              <span>{{ cart.total_discounts | money }}</span>
            </div>
          {% endif %}
          <div class="cart-drawer-footer-row">
            <h3>Bag Total</h3>
            <span>{{ cart.total_price | money }}</span>
          </div>
          {%- for type in shop.enabled_payment_types -%}
            <li class="list-payment__item">
              {{ type | payment_type_svg_tag: class: 'icon icon--full-color' }}
            </li>
          {%- endfor -%}
          <button
            type="submit"
            name="GO TO CHECKOUT"
            class="cart-drawer-button"
          >
            GO TO CHECKOUT
          </button>
        </footer>
      {% endif %}
    {% endform %}
  </div>
</div>

<script>
      window.openCartDrawer = () => {
        document.querySelector(".cart-drawer").classList.add("cart-drawer--active");
      }
      function openCartDrawer() {
        document.querySelector(".cart-drawer").classList.add("cart-drawer--active");
      }

      function closeCartDrawer() {
        document.querySelector(".cart-drawer").classList.remove("cart-drawer--active");
      }

      function updateCartItemCounts(count) {
        document.querySelectorAll(".cart-count").forEach((el) => {
          el.textContent = count;
        });
      }

      async function updateCartDrawer() {
        const res = await fetch("/?section_id=cart-drawer");
        const text = await res.text();
        const html = document.createElement("div");
        html.innerHTML = text;

        const newBox = html.querySelector(".cart-drawer").innerHTML;

        document.querySelector(".cart-drawer").innerHTML = newBox;

        addCartDrawerListeners();
      }

      function addCartDrawerListeners() {

    // Update quantities
        document.querySelectorAll(".cart-drawer-quantity-selector button").forEach((button) => {
          button.addEventListener("click", async () => {
          console.log(this)
    // Get line item key
            const rootItem = button
              .parentElement
              .parentElement
              .parentElement
              .parentElement;
            const key = rootItem.getAttribute("data-line-item-key");
            console.log(rootItem, key)
    // Get new quantity
            const currentQuantity = Number(button.parentElement.querySelector("input").value);
            const isUp = button.classList.contains("cart-drawer-quantity-selector-plus");
            const newQuantity = isUp
              ? currentQuantity + 1
              : currentQuantity - 1;

    // Ajax update\
            const res = await fetch("/cart/update.js", {
              method: "post",
              headers: {
                Accept: "application/json",
                "Content-Type": "application/json"
              },
              body: JSON.stringify(
                {
                  updates: {
                    [key]: newQuantity
                  }
                }
              )
            });
            const cart = await res.json();

            updateCartItemCounts(cart.item_count);

    // Update cart
            updateCartDrawer();
          });
        });

        document.querySelector(".cart-drawer-box").addEventListener("click", (e) => {
          e.stopPropagation();
        });

        document.querySelectorAll(".cart-drawer-header-right-close, .cart-drawer").forEach((el) => {
          el.addEventListener("click", () => {
            console.log("closing drawer");
            closeCartDrawer();
          });
        });

        function addRemoveFromCartListeners() {
    document.querySelectorAll(".remove-from-cart").forEach((button) => {
      button.addEventListener("click", async () => {
        const key = button.getAttribute("data-line-item-key");

        // Ajax update to remove item
        const res = await fetch("/cart/update.js", {
          method: "post",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json"
          },
          body: JSON.stringify(
            {
              updates: {
                [key]: 0
              }
            }
          )
        });
        const cart = await res.json();

        updateCartItemCounts(cart.item_count);

        // Update cart
        updateCartDrawer();
      });
    });
  }

  addRemoveFromCartListeners();
      }

      addCartDrawerListeners();

      document.querySelectorAll('form[action="/cart/add"]').forEach((form) => {
        form.addEventListener("submit", async (e) => {
          e.preventDefault();

    // Submit form with ajax
          await fetch("/cart/add", {
            method: "post",
            body: new FormData(form)
          });

    // Get cart count
          const res = await fetch("/cart.js");
          const cart = await res.json();
          updateCartItemCounts(cart.item_count);

    // Update cart
          await updateCartDrawer();

    // Open cart drawer
          openCartDrawer();
        });
      });

      document.querySelectorAll('a[href="/cart"]').forEach((a) => {
        a.addEventListener("click", (e) => {
          e.preventDefault();
          openCartDrawer();
        });
      });
</script>

{% schema %}
{
  "name": "Cart drawer"
}
{% endschema %}
